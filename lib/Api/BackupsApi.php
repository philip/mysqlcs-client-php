<?php
/**
 * BackupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.06
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * BackupsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BackupsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BackupsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteBackup
     *
     * Delete a Backup (Asynchronous)
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\DeleteBackupRequest $payload The request body contains details of the delete backup request. You must specify at least one attribute. (required)
     * @return \Swagger\Client\Model\AcceptedResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteBackup($identity_domain_id, $service_id, $payload)
    {
        list($response) = $this->deleteBackupWithHttpInfo($identity_domain_id, $service_id, $payload);
        return $response;
    }

    /**
     * Operation deleteBackupWithHttpInfo
     *
     * Delete a Backup (Asynchronous)
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\DeleteBackupRequest $payload The request body contains details of the delete backup request. You must specify at least one attribute. (required)
     * @return Array of \Swagger\Client\Model\AcceptedResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteBackupWithHttpInfo($identity_domain_id, $service_id, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling deleteBackup');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling deleteBackup');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling deleteBackup');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AcceptedResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AcceptedResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AcceptedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllBackups
     *
     * View All Backups
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return \Swagger\Client\Model\ViewAllBackupsResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllBackups($identity_domain_id, $service_id)
    {
        list($response) = $this->getAllBackupsWithHttpInfo($identity_domain_id, $service_id);
        return $response;
    }

    /**
     * Operation getAllBackupsWithHttpInfo
     *
     * View All Backups
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return Array of \Swagger\Client\Model\ViewAllBackupsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllBackupsWithHttpInfo($identity_domain_id, $service_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getAllBackups');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getAllBackups');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ViewAllBackupsResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ViewAllBackupsResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ViewAllBackupsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllDeletedBackups
     *
     * View All Deleted Backups
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return \Swagger\Client\Model\ViewAllDeletedResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllDeletedBackups($identity_domain_id, $service_id)
    {
        list($response) = $this->getAllDeletedBackupsWithHttpInfo($identity_domain_id, $service_id);
        return $response;
    }

    /**
     * Operation getAllDeletedBackupsWithHttpInfo
     *
     * View All Deleted Backups
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return Array of \Swagger\Client\Model\ViewAllDeletedResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllDeletedBackupsWithHttpInfo($identity_domain_id, $service_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getAllDeletedBackups');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getAllDeletedBackups');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ViewAllDeletedResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ViewAllDeletedResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ViewAllDeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBackup
     *
     * View a Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $backup_id Backup ID. (required)
     * @param bool $include_linked_details Flag that specifies whether to include information (&lt;code&gt;true&lt;/code&gt;) or exclude information about related backups (&lt;code&gt;false&lt;/code&gt;). When set to &lt;code&gt;true&lt;/code&gt;:&lt;ul&gt;&lt;li&gt;For a full backup, includes information about all incremental backups performed since the last full backup.&lt;/li&gt;&lt;li&gt;For an incremental backup, includes information about the previous full backup.&lt;/li&gt;&lt;/ul&gt;Defaults to &lt;code&gt;false&lt;/code&gt;, excluding information about related backups. (optional)
     * @return \Swagger\Client\Model\ViewBackup
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBackup($identity_domain_id, $service_id, $backup_id, $include_linked_details = null)
    {
        list($response) = $this->getBackupWithHttpInfo($identity_domain_id, $service_id, $backup_id, $include_linked_details);
        return $response;
    }

    /**
     * Operation getBackupWithHttpInfo
     *
     * View a Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $backup_id Backup ID. (required)
     * @param bool $include_linked_details Flag that specifies whether to include information (&lt;code&gt;true&lt;/code&gt;) or exclude information about related backups (&lt;code&gt;false&lt;/code&gt;). When set to &lt;code&gt;true&lt;/code&gt;:&lt;ul&gt;&lt;li&gt;For a full backup, includes information about all incremental backups performed since the last full backup.&lt;/li&gt;&lt;li&gt;For an incremental backup, includes information about the previous full backup.&lt;/li&gt;&lt;/ul&gt;Defaults to &lt;code&gt;false&lt;/code&gt;, excluding information about related backups. (optional)
     * @return Array of \Swagger\Client\Model\ViewBackup, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBackupWithHttpInfo($identity_domain_id, $service_id, $backup_id, $include_linked_details = null)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getBackup');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getBackup');
        }
        // verify the required parameter 'backup_id' is set
        if ($backup_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backup_id when calling getBackup');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups/{backupId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($include_linked_details !== null) {
            $queryParams['includeLinkedDetails'] = $this->apiClient->getSerializer()->toQueryValue($include_linked_details);
        }
        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($backup_id !== null) {
            $resourcePath = str_replace(
                "{" . "backupId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backup_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ViewBackup',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups/{backupId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ViewBackup', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ViewBackup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBackupConfiguration
     *
     * View the Backup Configuration
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return \Swagger\Client\Model\BackupconfigResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBackupConfiguration($identity_domain_id, $service_id)
    {
        list($response) = $this->getBackupConfigurationWithHttpInfo($identity_domain_id, $service_id);
        return $response;
    }

    /**
     * Operation getBackupConfigurationWithHttpInfo
     *
     * View the Backup Configuration
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return Array of \Swagger\Client\Model\BackupconfigResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBackupConfigurationWithHttpInfo($identity_domain_id, $service_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getBackupConfiguration');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getBackupConfiguration');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backupconfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BackupconfigResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backupconfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BackupconfigResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BackupconfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeletedBackup
     *
     * View a Deleted Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $job_id Job ID for the backup deletion. (required)
     * @return \Swagger\Client\Model\ViewDeletedResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDeletedBackup($identity_domain_id, $service_id, $job_id)
    {
        list($response) = $this->getDeletedBackupWithHttpInfo($identity_domain_id, $service_id, $job_id);
        return $response;
    }

    /**
     * Operation getDeletedBackupWithHttpInfo
     *
     * View a Deleted Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $job_id Job ID for the backup deletion. (required)
     * @return Array of \Swagger\Client\Model\ViewDeletedResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getDeletedBackupWithHttpInfo($identity_domain_id, $service_id, $job_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getDeletedBackup');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getDeletedBackup');
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling getDeletedBackup');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups/{jobId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ViewDeletedResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/deletedbackups/{jobId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ViewDeletedResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ViewDeletedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRestoreBackupOperations
     *
     * View All Restoration Operations
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return \Swagger\Client\Model\ViewAllRestorationsResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRestoreBackupOperations($identity_domain_id, $service_id)
    {
        list($response) = $this->getRestoreBackupOperationsWithHttpInfo($identity_domain_id, $service_id);
        return $response;
    }

    /**
     * Operation getRestoreBackupOperationsWithHttpInfo
     *
     * View All Restoration Operations
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return Array of \Swagger\Client\Model\ViewAllRestorationsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRestoreBackupOperationsWithHttpInfo($identity_domain_id, $service_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getRestoreBackupOperations');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getRestoreBackupOperations');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ViewAllRestorationsResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ViewAllRestorationsResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ViewAllRestorationsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRestoreBackupStatus
     *
     * View the Status of a Restoration Operation
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $job_id Job ID of the restoration operation. (required)
     * @return \Swagger\Client\Model\RestoreHistory
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRestoreBackupStatus($identity_domain_id, $service_id, $job_id)
    {
        list($response) = $this->getRestoreBackupStatusWithHttpInfo($identity_domain_id, $service_id, $job_id);
        return $response;
    }

    /**
     * Operation getRestoreBackupStatusWithHttpInfo
     *
     * View the Status of a Restoration Operation
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $job_id Job ID of the restoration operation. (required)
     * @return Array of \Swagger\Client\Model\RestoreHistory, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRestoreBackupStatusWithHttpInfo($identity_domain_id, $service_id, $job_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getRestoreBackupStatus');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getRestoreBackupStatus');
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling getRestoreBackupStatus');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups/{jobId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                "{" . "jobId" . "}",
                $this->apiClient->getSerializer()->toPathValue($job_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestoreHistory',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups/{jobId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestoreHistory', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestoreHistory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation restoreBackup
     *
     * Restore a Service Instance from Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\RestorationPostrequest $payload The request body defines the details of the restoration request. (required)
     * @return \Swagger\Client\Model\AcceptedResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function restoreBackup($identity_domain_id, $service_id, $payload)
    {
        list($response) = $this->restoreBackupWithHttpInfo($identity_domain_id, $service_id, $payload);
        return $response;
    }

    /**
     * Operation restoreBackupWithHttpInfo
     *
     * Restore a Service Instance from Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\RestorationPostrequest $payload The request body defines the details of the restoration request. (required)
     * @return Array of \Swagger\Client\Model\AcceptedResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function restoreBackupWithHttpInfo($identity_domain_id, $service_id, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling restoreBackup');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling restoreBackup');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling restoreBackup');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AcceptedResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/restoredbackups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AcceptedResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AcceptedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation startBackup
     *
     * Initiate an On-demand Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\OndemandRequest $payload The request body contains details of the on-demand backup request. (required)
     * @return \Swagger\Client\Model\AcceptedResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function startBackup($identity_domain_id, $service_id, $payload)
    {
        list($response) = $this->startBackupWithHttpInfo($identity_domain_id, $service_id, $payload);
        return $response;
    }

    /**
     * Operation startBackupWithHttpInfo
     *
     * Initiate an On-demand Backup
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\OndemandRequest $payload The request body contains details of the on-demand backup request. (required)
     * @return Array of \Swagger\Client\Model\AcceptedResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function startBackupWithHttpInfo($identity_domain_id, $service_id, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling startBackup');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling startBackup');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling startBackup');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AcceptedResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backups'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AcceptedResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AcceptedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBackupConfiguration
     *
     * Update the Backup Configuration
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\BackupconfigPostrequest $payload The request body defines the details of the backup configuration update request. Specify only those attributes that you want to update. (required)
     * @return \Swagger\Client\Model\BackupconfigResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateBackupConfiguration($identity_domain_id, $service_id, $payload)
    {
        list($response) = $this->updateBackupConfigurationWithHttpInfo($identity_domain_id, $service_id, $payload);
        return $response;
    }

    /**
     * Operation updateBackupConfigurationWithHttpInfo
     *
     * Update the Backup Configuration
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\BackupconfigPostrequest $payload The request body defines the details of the backup configuration update request. Specify only those attributes that you want to update. (required)
     * @return Array of \Swagger\Client\Model\BackupconfigResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateBackupConfigurationWithHttpInfo($identity_domain_id, $service_id, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling updateBackupConfiguration');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling updateBackupConfiguration');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling updateBackupConfiguration');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backupconfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BackupconfigResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/backupconfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BackupconfigResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BackupconfigResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
