<?php
/**
 * AccessRulesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.06
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AccessRulesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccessRulesApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AccessRulesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAccessRules
     *
     * View All Access Rules
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return \Swagger\Client\Model\SecrulesResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAccessRules($identity_domain_id, $service_id)
    {
        list($response) = $this->getAccessRulesWithHttpInfo($identity_domain_id, $service_id);
        return $response;
    }

    /**
     * Operation getAccessRulesWithHttpInfo
     *
     * View All Access Rules
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @return Array of \Swagger\Client\Model\SecrulesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAccessRulesWithHttpInfo($identity_domain_id, $service_id)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling getAccessRules');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling getAccessRules');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SecrulesResponse',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SecrulesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SecrulesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation insertAccessRule
     *
     * Add an Access Rule
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\AddsecrulePostrequest $payload The request body defines the details of the access rule to add. (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function insertAccessRule($identity_domain_id, $service_id, $payload)
    {
        list($response) = $this->insertAccessRuleWithHttpInfo($identity_domain_id, $service_id, $payload);
        return $response;
    }

    /**
     * Operation insertAccessRuleWithHttpInfo
     *
     * Add an Access Rule
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param \Swagger\Client\Model\AddsecrulePostrequest $payload The request body defines the details of the access rule to add. (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function insertAccessRuleWithHttpInfo($identity_domain_id, $service_id, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling insertAccessRule');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling insertAccessRule');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling insertAccessRule');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateAccessRule
     *
     * Update an Access Rule
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $rule_name Name of the access rule to disable or enable. (required)
     * @param \Swagger\Client\Model\UpdatesecrulePutrequest $payload The request body defines the details of the disable, enable, or delete request. (required)
     * @return \Swagger\Client\Model\SecrulesDetails
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccessRule($identity_domain_id, $service_id, $rule_name, $payload)
    {
        list($response) = $this->updateAccessRuleWithHttpInfo($identity_domain_id, $service_id, $rule_name, $payload);
        return $response;
    }

    /**
     * Operation updateAccessRuleWithHttpInfo
     *
     * Update an Access Rule
     *
     * @param string $identity_domain_id Name of the identity domain for the MySQL Cloud Service account. (required)
     * @param string $service_id Name of the Oracle MySQL Cloud Service instance. (required)
     * @param string $rule_name Name of the access rule to disable or enable. (required)
     * @param \Swagger\Client\Model\UpdatesecrulePutrequest $payload The request body defines the details of the disable, enable, or delete request. (required)
     * @return Array of \Swagger\Client\Model\SecrulesDetails, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAccessRuleWithHttpInfo($identity_domain_id, $service_id, $rule_name, $payload)
    {
        // verify the required parameter 'identity_domain_id' is set
        if ($identity_domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_domain_id when calling updateAccessRule');
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_id when calling updateAccessRule');
        }
        // verify the required parameter 'rule_name' is set
        if ($rule_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rule_name when calling updateAccessRule');
        }
        // verify the required parameter 'payload' is set
        if ($payload === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payload when calling updateAccessRule');
        }
        // parse inputs
        $resourcePath = "/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules/{ruleName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($identity_domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "identityDomainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_domain_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                "{" . "serviceId" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($rule_name !== null) {
            $resourcePath = str_replace(
                "{" . "ruleName" . "}",
                $this->apiClient->getSerializer()->toPathValue($rule_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payload)) {
            $_tempBody = $payload;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-ID-TENANT-NAME');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-ID-TENANT-NAME'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SecrulesDetails',
                '/paas/api/v1.1/instancemgmt/{identityDomainId}/services/MySQLCS/instances/{serviceId}/accessrules/{ruleName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SecrulesDetails', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SecrulesDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SecrulesDetails', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
