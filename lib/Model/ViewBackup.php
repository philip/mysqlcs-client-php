<?php
/**
 * ViewBackup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ViewBackup Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ViewBackup implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'view-backup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'backup_id' => 'string',
        'job_id' => 'string',
        'backup_start_date' => 'string',
        'backup_complete_date' => 'string',
        'expiration_date' => 'string',
        'deleted_on_date' => 'string',
        'initiated_by' => 'string',
        'full' => 'bool',
        'local' => 'bool',
        'local_copy' => 'bool',
        'database_included' => 'bool',
        'size' => 'string',
        'size_in_bytes' => 'int',
        'status' => 'string',
        'href' => 'string',
        'job_history' => '\Swagger\Client\Model\JobHistory[]',
        'full_backup' => 'string',
        'incremental_backups' => 'string[]',
        'notes' => 'string',
        'tag' => '\Swagger\Client\Model\ViewBackupTag'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'backup_id' => 'backupId',
        'job_id' => 'jobId',
        'backup_start_date' => 'backupStartDate',
        'backup_complete_date' => 'backupCompleteDate',
        'expiration_date' => 'expirationDate',
        'deleted_on_date' => 'deletedOnDate',
        'initiated_by' => 'initiatedBy',
        'full' => 'full',
        'local' => 'local',
        'local_copy' => 'localCopy',
        'database_included' => 'databaseIncluded',
        'size' => 'size',
        'size_in_bytes' => 'sizeInBytes',
        'status' => 'status',
        'href' => 'href',
        'job_history' => 'jobHistory',
        'full_backup' => 'fullBackup',
        'incremental_backups' => 'incrementalBackups',
        'notes' => 'notes',
        'tag' => 'tag'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'backup_id' => 'setBackupId',
        'job_id' => 'setJobId',
        'backup_start_date' => 'setBackupStartDate',
        'backup_complete_date' => 'setBackupCompleteDate',
        'expiration_date' => 'setExpirationDate',
        'deleted_on_date' => 'setDeletedOnDate',
        'initiated_by' => 'setInitiatedBy',
        'full' => 'setFull',
        'local' => 'setLocal',
        'local_copy' => 'setLocalCopy',
        'database_included' => 'setDatabaseIncluded',
        'size' => 'setSize',
        'size_in_bytes' => 'setSizeInBytes',
        'status' => 'setStatus',
        'href' => 'setHref',
        'job_history' => 'setJobHistory',
        'full_backup' => 'setFullBackup',
        'incremental_backups' => 'setIncrementalBackups',
        'notes' => 'setNotes',
        'tag' => 'setTag'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'backup_id' => 'getBackupId',
        'job_id' => 'getJobId',
        'backup_start_date' => 'getBackupStartDate',
        'backup_complete_date' => 'getBackupCompleteDate',
        'expiration_date' => 'getExpirationDate',
        'deleted_on_date' => 'getDeletedOnDate',
        'initiated_by' => 'getInitiatedBy',
        'full' => 'getFull',
        'local' => 'getLocal',
        'local_copy' => 'getLocalCopy',
        'database_included' => 'getDatabaseIncluded',
        'size' => 'getSize',
        'size_in_bytes' => 'getSizeInBytes',
        'status' => 'getStatus',
        'href' => 'getHref',
        'job_history' => 'getJobHistory',
        'full_backup' => 'getFullBackup',
        'incremental_backups' => 'getIncrementalBackups',
        'notes' => 'getNotes',
        'tag' => 'getTag'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['backup_start_date'] = isset($data['backup_start_date']) ? $data['backup_start_date'] : null;
        $this->container['backup_complete_date'] = isset($data['backup_complete_date']) ? $data['backup_complete_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['deleted_on_date'] = isset($data['deleted_on_date']) ? $data['deleted_on_date'] : null;
        $this->container['initiated_by'] = isset($data['initiated_by']) ? $data['initiated_by'] : null;
        $this->container['full'] = isset($data['full']) ? $data['full'] : null;
        $this->container['local'] = isset($data['local']) ? $data['local'] : null;
        $this->container['local_copy'] = isset($data['local_copy']) ? $data['local_copy'] : null;
        $this->container['database_included'] = isset($data['database_included']) ? $data['database_included'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['size_in_bytes'] = isset($data['size_in_bytes']) ? $data['size_in_bytes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['job_history'] = isset($data['job_history']) ? $data['job_history'] : null;
        $this->container['full_backup'] = isset($data['full_backup']) ? $data['full_backup'] : null;
        $this->container['incremental_backups'] = isset($data['incremental_backups']) ? $data['incremental_backups'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets backup_id
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     * @param string $backup_id Backup ID. You can use the backup ID to manage the specific backup (for example, download).
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id Job ID for the backup.
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets backup_start_date
     * @return string
     */
    public function getBackupStartDate()
    {
        return $this->container['backup_start_date'];
    }

    /**
     * Sets backup_start_date
     * @param string $backup_start_date Date and time that the backup started.
     * @return $this
     */
    public function setBackupStartDate($backup_start_date)
    {
        $this->container['backup_start_date'] = $backup_start_date;

        return $this;
    }

    /**
     * Gets backup_complete_date
     * @return string
     */
    public function getBackupCompleteDate()
    {
        return $this->container['backup_complete_date'];
    }

    /**
     * Sets backup_complete_date
     * @param string $backup_complete_date Date and time that the backup completed.
     * @return $this
     */
    public function setBackupCompleteDate($backup_complete_date)
    {
        $this->container['backup_complete_date'] = $backup_complete_date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param string $expiration_date Date and time that the backup will be deleted automatically from storage. If specify <code>keepForever</code> in backup request, the backup is retained indefinitely or until manually deleted.
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets deleted_on_date
     * @return string
     */
    public function getDeletedOnDate()
    {
        return $this->container['deleted_on_date'];
    }

    /**
     * Sets deleted_on_date
     * @param string $deleted_on_date Date and time that the backup deletion completed.
     * @return $this
     */
    public function setDeletedOnDate($deleted_on_date)
    {
        $this->container['deleted_on_date'] = $deleted_on_date;

        return $this;
    }

    /**
     * Gets initiated_by
     * @return string
     */
    public function getInitiatedBy()
    {
        return $this->container['initiated_by'];
    }

    /**
     * Sets initiated_by
     * @param string $initiated_by User account that initiated this operation. If the operation is a scheduled automated backup, the value is <code>scheduled</code>.
     * @return $this
     */
    public function setInitiatedBy($initiated_by)
    {
        $this->container['initiated_by'] = $initiated_by;

        return $this;
    }

    /**
     * Gets full
     * @return bool
     */
    public function getFull()
    {
        return $this->container['full'];
    }

    /**
     * Sets full
     * @param bool $full Flag that specifies whether this is a full (<code>true</code>) or incremental (<code>false</code>) backup. A full backup contains all the data files required to restore the service instance databases. An incremental backup contains only changes to the databases since the last scheduled full backup.
     * @return $this
     */
    public function setFull($full)
    {
        $this->container['full'] = $full;

        return $this;
    }

    /**
     * Gets local
     * @return bool
     */
    public function getLocal()
    {
        return $this->container['local'];
    }

    /**
     * Sets local
     * @param bool $local Flag that specifies whether the backup is to be downloaded and stored locally (<code>true</code>), or archived and stored remotely on the Oracle Storage Cloud Service container (<code>false</code>).
     * @return $this
     */
    public function setLocal($local)
    {
        $this->container['local'] = $local;

        return $this;
    }

    /**
     * Gets local_copy
     * @return bool
     */
    public function getLocalCopy()
    {
        return $this->container['local_copy'];
    }

    /**
     * Sets local_copy
     * @param bool $local_copy Flag that specifies whether the local copy of a backup is maintained for a backup that has been uploaded to the Oracle Storage Cloud Service.
     * @return $this
     */
    public function setLocalCopy($local_copy)
    {
        $this->container['local_copy'] = $local_copy;

        return $this;
    }

    /**
     * Gets database_included
     * @return bool
     */
    public function getDatabaseIncluded()
    {
        return $this->container['database_included'];
    }

    /**
     * Sets database_included
     * @param bool $database_included This should always <code>false</code> for Oracle MySQL Cloud Service.
     * @return $this
     */
    public function setDatabaseIncluded($database_included)
    {
        $this->container['database_included'] = $database_included;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size Size of the backup, in MBs. For example: <code>1011.4MB</code> (backup complete) or <code>Unknown</code> (backup in-progress).
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets size_in_bytes
     * @return int
     */
    public function getSizeInBytes()
    {
        return $this->container['size_in_bytes'];
    }

    /**
     * Sets size_in_bytes
     * @param int $size_in_bytes Size of the backup, in Bytes.
     * @return $this
     */
    public function setSizeInBytes($size_in_bytes)
    {
        $this->container['size_in_bytes'] = $size_in_bytes;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the backup. Valid values include: <code>Completed</code>, <code>Failed</code>, <code>Deleted</code>, <code>Backup In Progress</code>, <code>Upload In Progress</code>, <code>Download In Progress</code>, <code>Restore In Progress</code>, or <code>Delete In Progress</code>.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets href
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     * @param string $href URI of the backup resource.
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets job_history
     * @return \Swagger\Client\Model\JobHistory[]
     */
    public function getJobHistory()
    {
        return $this->container['job_history'];
    }

    /**
     * Sets job_history
     * @param \Swagger\Client\Model\JobHistory[] $job_history Groups job history details. The job history details only return for a specific backup request.
     * @return $this
     */
    public function setJobHistory($job_history)
    {
        $this->container['job_history'] = $job_history;

        return $this;
    }

    /**
     * Gets full_backup
     * @return string
     */
    public function getFullBackup()
    {
        return $this->container['full_backup'];
    }

    /**
     * Sets full_backup
     * @param string $full_backup Full backup linked to the incremental backup.
     * @return $this
     */
    public function setFullBackup($full_backup)
    {
        $this->container['full_backup'] = $full_backup;

        return $this;
    }

    /**
     * Gets incremental_backups
     * @return string[]
     */
    public function getIncrementalBackups()
    {
        return $this->container['incremental_backups'];
    }

    /**
     * Sets incremental_backups
     * @param string[] $incremental_backups List of incremental backups linked to the full backup.
     * @return $this
     */
    public function setIncrementalBackups($incremental_backups)
    {
        $this->container['incremental_backups'] = $incremental_backups;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Free-form text that provides additional information about the backup.
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets tag
     * @return \Swagger\Client\Model\ViewBackupTag
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param \Swagger\Client\Model\ViewBackupTag $tag
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


