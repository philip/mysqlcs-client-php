<?php
/**
 * ServiceViewComponents
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ServiceViewComponents Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServiceViewComponents implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'service-view-components';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'service_id' => 'string',
        'component_id' => 'string',
        'state' => 'string',
        'version' => 'string',
        'creation_date' => 'string',
        'instance_name' => 'string',
        'instance_role' => 'string',
        'attributes' => '\Swagger\Client\Model\ServiceAttributes[]',
        'vm_instances' => '\Swagger\Client\Model\ServiceVmInstanceDetails[]',
        'admin_host_name' => 'string',
        'storage_volumes' => '\Swagger\Client\Model\ServiceViewStorageVolume[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'service_id' => 'serviceId',
        'component_id' => 'componentId',
        'state' => 'state',
        'version' => 'version',
        'creation_date' => 'creationDate',
        'instance_name' => 'instanceName',
        'instance_role' => 'instanceRole',
        'attributes' => 'attributes',
        'vm_instances' => 'vmInstances',
        'admin_host_name' => 'adminHostName',
        'storage_volumes' => 'storageVolumes'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'service_id' => 'setServiceId',
        'component_id' => 'setComponentId',
        'state' => 'setState',
        'version' => 'setVersion',
        'creation_date' => 'setCreationDate',
        'instance_name' => 'setInstanceName',
        'instance_role' => 'setInstanceRole',
        'attributes' => 'setAttributes',
        'vm_instances' => 'setVmInstances',
        'admin_host_name' => 'setAdminHostName',
        'storage_volumes' => 'setStorageVolumes'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'service_id' => 'getServiceId',
        'component_id' => 'getComponentId',
        'state' => 'getState',
        'version' => 'getVersion',
        'creation_date' => 'getCreationDate',
        'instance_name' => 'getInstanceName',
        'instance_role' => 'getInstanceRole',
        'attributes' => 'getAttributes',
        'vm_instances' => 'getVmInstances',
        'admin_host_name' => 'getAdminHostName',
        'storage_volumes' => 'getStorageVolumes'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['component_id'] = isset($data['component_id']) ? $data['component_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['instance_role'] = isset($data['instance_role']) ? $data['instance_role'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['vm_instances'] = isset($data['vm_instances']) ? $data['vm_instances'] : null;
        $this->container['admin_host_name'] = isset($data['admin_host_name']) ? $data['admin_host_name'] : null;
        $this->container['storage_volumes'] = isset($data['storage_volumes']) ? $data['storage_volumes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets service_id
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     * @param string $service_id ID of the Oracle MySQL Cloud Service instance.
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets component_id
     * @return string
     */
    public function getComponentId()
    {
        return $this->container['component_id'];
    }

    /**
     * Sets component_id
     * @param string $component_id ID of the service component.
     * @return $this
     */
    public function setComponentId($component_id)
    {
        $this->container['component_id'] = $component_id;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state The current state of the component.
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version The version of the component. For example, <code>5.7</code>.
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets creation_date
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param string $creation_date The date and time when the service instance was created.
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets instance_name
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     * @param string $instance_name The component name of the service instance. For example, <code>mysql</code>.
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets instance_role
     * @return string
     */
    public function getInstanceRole()
    {
        return $this->container['instance_role'];
    }

    /**
     * Sets instance_role
     * @param string $instance_role The role of the service instance. It is <code>None</code> for Oracle MySQL Cloud Service.
     * @return $this
     */
    public function setInstanceRole($instance_role)
    {
        $this->container['instance_role'] = $instance_role;

        return $this;
    }

    /**
     * Gets attributes
     * @return \Swagger\Client\Model\ServiceAttributes[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Swagger\Client\Model\ServiceAttributes[] $attributes Array of service component attributes, such as compute shape, connect string, etc.
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets vm_instances
     * @return \Swagger\Client\Model\ServiceVmInstanceDetails[]
     */
    public function getVmInstances()
    {
        return $this->container['vm_instances'];
    }

    /**
     * Sets vm_instances
     * @param \Swagger\Client\Model\ServiceVmInstanceDetails[] $vm_instances VM instances details.
     * @return $this
     */
    public function setVmInstances($vm_instances)
    {
        $this->container['vm_instances'] = $vm_instances;

        return $this;
    }

    /**
     * Gets admin_host_name
     * @return string
     */
    public function getAdminHostName()
    {
        return $this->container['admin_host_name'];
    }

    /**
     * Sets admin_host_name
     * @param string $admin_host_name The host name of the administration node. It is usually the instance itself.
     * @return $this
     */
    public function setAdminHostName($admin_host_name)
    {
        $this->container['admin_host_name'] = $admin_host_name;

        return $this;
    }

    /**
     * Gets storage_volumes
     * @return \Swagger\Client\Model\ServiceViewStorageVolume[]
     */
    public function getStorageVolumes()
    {
        return $this->container['storage_volumes'];
    }

    /**
     * Sets storage_volumes
     * @param \Swagger\Client\Model\ServiceViewStorageVolume[] $storage_volumes All storage volumes of the service instance.
     * @return $this
     */
    public function setStorageVolumes($storage_volumes)
    {
        $this->container['storage_volumes'] = $storage_volumes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


