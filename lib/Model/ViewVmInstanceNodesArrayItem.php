<?php
/**
 * ViewVmInstanceNodesArrayItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ViewVmInstanceNodesArrayItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ViewVmInstanceNodesArrayItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'view-vm-instance-nodes-array-item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'vm_id' => 'string',
        'hostname' => 'string',
        'label' => 'string',
        'ip_address' => 'string',
        'public_ip_address' => 'string',
        'usage_type' => 'string',
        'role' => 'string',
        'component_type' => 'string',
        'state' => 'string',
        'shape_id' => 'string',
        'total_storage' => 'int',
        'creation_date' => 'string',
        'is_admin_node' => 'bool',
        'servers' => '\Swagger\Client\Model\ViewVmInstanceServer[]',
        'storage_volumes' => '\Swagger\Client\Model\ViewStorageVolume[]',
        'vm_state_display_name' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'vm_id' => 'vmId',
        'hostname' => 'hostname',
        'label' => 'label',
        'ip_address' => 'ipAddress',
        'public_ip_address' => 'publicIpAddress',
        'usage_type' => 'usageType',
        'role' => 'role',
        'component_type' => 'componentType',
        'state' => 'state',
        'shape_id' => 'shapeId',
        'total_storage' => 'totalStorage',
        'creation_date' => 'creationDate',
        'is_admin_node' => 'isAdminNode',
        'servers' => 'servers',
        'storage_volumes' => 'storageVolumes',
        'vm_state_display_name' => 'vmStateDisplayName'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'vm_id' => 'setVmId',
        'hostname' => 'setHostname',
        'label' => 'setLabel',
        'ip_address' => 'setIpAddress',
        'public_ip_address' => 'setPublicIpAddress',
        'usage_type' => 'setUsageType',
        'role' => 'setRole',
        'component_type' => 'setComponentType',
        'state' => 'setState',
        'shape_id' => 'setShapeId',
        'total_storage' => 'setTotalStorage',
        'creation_date' => 'setCreationDate',
        'is_admin_node' => 'setIsAdminNode',
        'servers' => 'setServers',
        'storage_volumes' => 'setStorageVolumes',
        'vm_state_display_name' => 'setVmStateDisplayName'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'vm_id' => 'getVmId',
        'hostname' => 'getHostname',
        'label' => 'getLabel',
        'ip_address' => 'getIpAddress',
        'public_ip_address' => 'getPublicIpAddress',
        'usage_type' => 'getUsageType',
        'role' => 'getRole',
        'component_type' => 'getComponentType',
        'state' => 'getState',
        'shape_id' => 'getShapeId',
        'total_storage' => 'getTotalStorage',
        'creation_date' => 'getCreationDate',
        'is_admin_node' => 'getIsAdminNode',
        'servers' => 'getServers',
        'storage_volumes' => 'getStorageVolumes',
        'vm_state_display_name' => 'getVmStateDisplayName'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vm_id'] = isset($data['vm_id']) ? $data['vm_id'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['public_ip_address'] = isset($data['public_ip_address']) ? $data['public_ip_address'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['component_type'] = isset($data['component_type']) ? $data['component_type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['shape_id'] = isset($data['shape_id']) ? $data['shape_id'] : null;
        $this->container['total_storage'] = isset($data['total_storage']) ? $data['total_storage'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['is_admin_node'] = isset($data['is_admin_node']) ? $data['is_admin_node'] : null;
        $this->container['servers'] = isset($data['servers']) ? $data['servers'] : null;
        $this->container['storage_volumes'] = isset($data['storage_volumes']) ? $data['storage_volumes'] : null;
        $this->container['vm_state_display_name'] = isset($data['vm_state_display_name']) ? $data['vm_state_display_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets vm_id
     * @return string
     */
    public function getVmId()
    {
        return $this->container['vm_id'];
    }

    /**
     * Sets vm_id
     * @param string $vm_id The ID of the compute node.
     * @return $this
     */
    public function setVmId($vm_id)
    {
        $this->container['vm_id'] = $vm_id;

        return $this;
    }

    /**
     * Gets hostname
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     * @param string $hostname The host name of the compute node.
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label The label of the compute node.
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     * @param string $ip_address The IP address of the compute node.
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets public_ip_address
     * @return string
     */
    public function getPublicIpAddress()
    {
        return $this->container['public_ip_address'];
    }

    /**
     * Sets public_ip_address
     * @param string $public_ip_address The IP address of the compute node.
     * @return $this
     */
    public function setPublicIpAddress($public_ip_address)
    {
        $this->container['public_ip_address'] = $public_ip_address;

        return $this;
    }

    /**
     * Gets usage_type
     * @return string
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     * @param string $usage_type The usage type of the compute node. It is usually <code>MYSQL_SERVER</code> for Oracle MySQL Cloud Service.
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets role
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param string $role The role of the compute node. It is usually <code>MYSQL_SERVER</code> for Oracle MySQL Cloud Service.
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets component_type
     * @return string
     */
    public function getComponentType()
    {
        return $this->container['component_type'];
    }

    /**
     * Sets component_type
     * @param string $component_type The type of the component. It is usually <code>mysql</code> for Oracle MySQL Cloud Service.
     * @return $this
     */
    public function setComponentType($component_type)
    {
        $this->container['component_type'] = $component_type;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state The current state of the compute node. Valid values are: <ul><li><code>Ready</code>: Fully operational</li><li><code>Starting</code>: Being created or initialized</li><li><code>Stopping</code>: Being stopped</li><li><code>Error</code>: Has some error condition(s)</li></uL>
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets shape_id
     * @return string
     */
    public function getShapeId()
    {
        return $this->container['shape_id'];
    }

    /**
     * Sets shape_id
     * @param string $shape_id The Oracle Compute Cloud shape of the compute node.
     * @return $this
     */
    public function setShapeId($shape_id)
    {
        $this->container['shape_id'] = $shape_id;

        return $this;
    }

    /**
     * Gets total_storage
     * @return int
     */
    public function getTotalStorage()
    {
        return $this->container['total_storage'];
    }

    /**
     * Sets total_storage
     * @param int $total_storage The size in GB of the total storage allocated to the compute node, including data volume, backup volume, and MySQL log volume.
     * @return $this
     */
    public function setTotalStorage($total_storage)
    {
        $this->container['total_storage'] = $total_storage;

        return $this;
    }

    /**
     * Gets creation_date
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param string $creation_date The date and time when the service instance was created.
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets is_admin_node
     * @return bool
     */
    public function getIsAdminNode()
    {
        return $this->container['is_admin_node'];
    }

    /**
     * Sets is_admin_node
     * @param bool $is_admin_node Indicates whether the compute node is an administration node.
     * @return $this
     */
    public function setIsAdminNode($is_admin_node)
    {
        $this->container['is_admin_node'] = $is_admin_node;

        return $this;
    }

    /**
     * Gets servers
     * @return \Swagger\Client\Model\ViewVmInstanceServer[]
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     * @param \Swagger\Client\Model\ViewVmInstanceServer[] $servers Servers Array Item.
     * @return $this
     */
    public function setServers($servers)
    {
        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets storage_volumes
     * @return \Swagger\Client\Model\ViewStorageVolume[]
     */
    public function getStorageVolumes()
    {
        return $this->container['storage_volumes'];
    }

    /**
     * Sets storage_volumes
     * @param \Swagger\Client\Model\ViewStorageVolume[] $storage_volumes All storage volumes of the service instance.
     * @return $this
     */
    public function setStorageVolumes($storage_volumes)
    {
        $this->container['storage_volumes'] = $storage_volumes;

        return $this;
    }

    /**
     * Gets vm_state_display_name
     * @return string
     */
    public function getVmStateDisplayName()
    {
        return $this->container['vm_state_display_name'];
    }

    /**
     * Sets vm_state_display_name
     * @param string $vm_state_display_name The display name of the current state of the compute node.
     * @return $this
     */
    public function setVmStateDisplayName($vm_state_display_name)
    {
        $this->container['vm_state_display_name'] = $vm_state_display_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


