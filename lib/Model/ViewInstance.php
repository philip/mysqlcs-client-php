<?php
/**
 * ViewInstance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ViewInstance Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ViewInstance implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'view-instance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'service_id' => 'string',
        'service_name' => 'string',
        'service_type' => 'string',
        'domain_name' => 'string',
        'service_version' => 'string',
        'release_version' => 'string',
        'meta_version' => 'string',
        'service_level' => 'string',
        'subscription' => 'string',
        'metering_frequency' => 'string',
        'edition' => 'string',
        'cloud_storage_container' => 'string',
        'attributes' => '\Swagger\Client\Model\ServiceAttribute[]',
        'components' => '\Swagger\Client\Model\ViewServiceComponent[]',
        'activity_logs' => '\Swagger\Client\Model\ViewActivityLog[]',
        'service_level_display_name' => 'string',
        'edition_display_name' => 'string',
        'metering_frequency_display_name' => 'string',
        'data_volume_size' => 'string',
        'mysql_port' => 'string',
        'backup_destination' => 'string',
        'cloud_storage_container' => 'string',
        'local_backup_volume_mount' => 'string',
        'local_backup_volume_size' => 'string',
        'total_shared_storage' => 'string',
        'service_state_display_name' => 'string',
        'compute_site_name' => 'string',
        'patching' => '\Swagger\Client\Model\ViewServicePatching'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'service_id' => 'serviceId',
        'service_name' => 'serviceName',
        'service_type' => 'serviceType',
        'domain_name' => 'domainName',
        'service_version' => 'serviceVersion',
        'release_version' => 'releaseVersion',
        'meta_version' => 'metaVersion',
        'service_level' => 'serviceLevel',
        'subscription' => 'subscription',
        'metering_frequency' => 'meteringFrequency',
        'edition' => 'edition',
        'cloud_storage_container' => 'cloudStorageContainer',
        'attributes' => 'attributes',
        'components' => 'components',
        'activity_logs' => 'activityLogs',
        'service_level_display_name' => 'serviceLevelDisplayName',
        'edition_display_name' => 'editionDisplayName',
        'metering_frequency_display_name' => 'meteringFrequencyDisplayName',
        'data_volume_size' => 'DATA_VOLUME_SIZE',
        'mysql_port' => 'MYSQL_PORT',
        'backup_destination' => 'BACKUP_DESTINATION',
        'cloud_storage_container' => 'CLOUD_STORAGE_CONTAINER',
        'local_backup_volume_mount' => 'LOCAL_BACKUP_VOLUME_MOUNT',
        'local_backup_volume_size' => 'LOCAL_BACKUP_VOLUME_SIZE',
        'total_shared_storage' => 'totalSharedStorage',
        'service_state_display_name' => 'serviceStateDisplayName',
        'compute_site_name' => 'computeSiteName',
        'patching' => 'patching'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'service_id' => 'setServiceId',
        'service_name' => 'setServiceName',
        'service_type' => 'setServiceType',
        'domain_name' => 'setDomainName',
        'service_version' => 'setServiceVersion',
        'release_version' => 'setReleaseVersion',
        'meta_version' => 'setMetaVersion',
        'service_level' => 'setServiceLevel',
        'subscription' => 'setSubscription',
        'metering_frequency' => 'setMeteringFrequency',
        'edition' => 'setEdition',
        'cloud_storage_container' => 'setCloudStorageContainer',
        'attributes' => 'setAttributes',
        'components' => 'setComponents',
        'activity_logs' => 'setActivityLogs',
        'service_level_display_name' => 'setServiceLevelDisplayName',
        'edition_display_name' => 'setEditionDisplayName',
        'metering_frequency_display_name' => 'setMeteringFrequencyDisplayName',
        'data_volume_size' => 'setDataVolumeSize',
        'mysql_port' => 'setMysqlPort',
        'backup_destination' => 'setBackupDestination',
        'cloud_storage_container' => 'setCloudStorageContainer',
        'local_backup_volume_mount' => 'setLocalBackupVolumeMount',
        'local_backup_volume_size' => 'setLocalBackupVolumeSize',
        'total_shared_storage' => 'setTotalSharedStorage',
        'service_state_display_name' => 'setServiceStateDisplayName',
        'compute_site_name' => 'setComputeSiteName',
        'patching' => 'setPatching'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'service_id' => 'getServiceId',
        'service_name' => 'getServiceName',
        'service_type' => 'getServiceType',
        'domain_name' => 'getDomainName',
        'service_version' => 'getServiceVersion',
        'release_version' => 'getReleaseVersion',
        'meta_version' => 'getMetaVersion',
        'service_level' => 'getServiceLevel',
        'subscription' => 'getSubscription',
        'metering_frequency' => 'getMeteringFrequency',
        'edition' => 'getEdition',
        'cloud_storage_container' => 'getCloudStorageContainer',
        'attributes' => 'getAttributes',
        'components' => 'getComponents',
        'activity_logs' => 'getActivityLogs',
        'service_level_display_name' => 'getServiceLevelDisplayName',
        'edition_display_name' => 'getEditionDisplayName',
        'metering_frequency_display_name' => 'getMeteringFrequencyDisplayName',
        'data_volume_size' => 'getDataVolumeSize',
        'mysql_port' => 'getMysqlPort',
        'backup_destination' => 'getBackupDestination',
        'cloud_storage_container' => 'getCloudStorageContainer',
        'local_backup_volume_mount' => 'getLocalBackupVolumeMount',
        'local_backup_volume_size' => 'getLocalBackupVolumeSize',
        'total_shared_storage' => 'getTotalSharedStorage',
        'service_state_display_name' => 'getServiceStateDisplayName',
        'compute_site_name' => 'getComputeSiteName',
        'patching' => 'getPatching'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['service_version'] = isset($data['service_version']) ? $data['service_version'] : null;
        $this->container['release_version'] = isset($data['release_version']) ? $data['release_version'] : null;
        $this->container['meta_version'] = isset($data['meta_version']) ? $data['meta_version'] : null;
        $this->container['service_level'] = isset($data['service_level']) ? $data['service_level'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['metering_frequency'] = isset($data['metering_frequency']) ? $data['metering_frequency'] : null;
        $this->container['edition'] = isset($data['edition']) ? $data['edition'] : null;
        $this->container['cloud_storage_container'] = isset($data['cloud_storage_container']) ? $data['cloud_storage_container'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['activity_logs'] = isset($data['activity_logs']) ? $data['activity_logs'] : null;
        $this->container['service_level_display_name'] = isset($data['service_level_display_name']) ? $data['service_level_display_name'] : null;
        $this->container['edition_display_name'] = isset($data['edition_display_name']) ? $data['edition_display_name'] : null;
        $this->container['metering_frequency_display_name'] = isset($data['metering_frequency_display_name']) ? $data['metering_frequency_display_name'] : null;
        $this->container['data_volume_size'] = isset($data['data_volume_size']) ? $data['data_volume_size'] : null;
        $this->container['mysql_port'] = isset($data['mysql_port']) ? $data['mysql_port'] : null;
        $this->container['backup_destination'] = isset($data['backup_destination']) ? $data['backup_destination'] : null;
        $this->container['cloud_storage_container'] = isset($data['cloud_storage_container']) ? $data['cloud_storage_container'] : null;
        $this->container['local_backup_volume_mount'] = isset($data['local_backup_volume_mount']) ? $data['local_backup_volume_mount'] : null;
        $this->container['local_backup_volume_size'] = isset($data['local_backup_volume_size']) ? $data['local_backup_volume_size'] : null;
        $this->container['total_shared_storage'] = isset($data['total_shared_storage']) ? $data['total_shared_storage'] : null;
        $this->container['service_state_display_name'] = isset($data['service_state_display_name']) ? $data['service_state_display_name'] : null;
        $this->container['compute_site_name'] = isset($data['compute_site_name']) ? $data['compute_site_name'] : null;
        $this->container['patching'] = isset($data['patching']) ? $data['patching'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets service_id
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     * @param string $service_id ID of the Oracle MySQL Cloud Service instance.
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets service_name
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     * @param string $service_name Name of the Oracle MySQL Cloud Service instance.
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets service_type
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     * @param string $service_type Type of the Oracle MySQL Cloud Service instance, such as <code>MySQLCS</code>.
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets domain_name
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     * @param string $domain_name The identity domain housing the service instance.
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets service_version
     * @return string
     */
    public function getServiceVersion()
    {
        return $this->container['service_version'];
    }

    /**
     * Sets service_version
     * @param string $service_version The major version of MySQL Server. For example, <code>5.7</code>.
     * @return $this
     */
    public function setServiceVersion($service_version)
    {
        $this->container['service_version'] = $service_version;

        return $this;
    }

    /**
     * Gets release_version
     * @return string
     */
    public function getReleaseVersion()
    {
        return $this->container['release_version'];
    }

    /**
     * Sets release_version
     * @param string $release_version The release version of MySQL Server. For example, <code>5.7.13</code>.
     * @return $this
     */
    public function setReleaseVersion($release_version)
    {
        $this->container['release_version'] = $release_version;

        return $this;
    }

    /**
     * Gets meta_version
     * @return string
     */
    public function getMetaVersion()
    {
        return $this->container['meta_version'];
    }

    /**
     * Sets meta_version
     * @param string $meta_version The release version of metadata service manager.
     * @return $this
     */
    public function setMetaVersion($meta_version)
    {
        $this->container['meta_version'] = $meta_version;

        return $this;
    }

    /**
     * Gets service_level
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->container['service_level'];
    }

    /**
     * Sets service_level
     * @param string $service_level The service level of the service instance. For example, <code>PAAS</code> for Oracle Cloud Service.
     * @return $this
     */
    public function setServiceLevel($service_level)
    {
        $this->container['service_level'] = $service_level;

        return $this;
    }

    /**
     * Gets subscription
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     * @param string $subscription The subscription type of the service instance; either <code>MONTHLY</code> or <code>HOURLY</code>.
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets metering_frequency
     * @return string
     */
    public function getMeteringFrequency()
    {
        return $this->container['metering_frequency'];
    }

    /**
     * Sets metering_frequency
     * @param string $metering_frequency The billing frequency of the service instance; either <code>MONTHLY</code> or <code>HOURLY</code>.
     * @return $this
     */
    public function setMeteringFrequency($metering_frequency)
    {
        $this->container['metering_frequency'] = $metering_frequency;

        return $this;
    }

    /**
     * Gets edition
     * @return string
     */
    public function getEdition()
    {
        return $this->container['edition'];
    }

    /**
     * Sets edition
     * @param string $edition The edition of MySQL Server. For example, <code>EE</code>.
     * @return $this
     */
    public function setEdition($edition)
    {
        $this->container['edition'] = $edition;

        return $this;
    }

    /**
     * Gets cloud_storage_container
     * @return string
     */
    public function getCloudStorageContainer()
    {
        return $this->container['cloud_storage_container'];
    }

    /**
     * Sets cloud_storage_container
     * @param string $cloud_storage_container Name of the Oracle Storage Cloud Service container used to provide storage for MySQL service instance backups.
     * @return $this
     */
    public function setCloudStorageContainer($cloud_storage_container)
    {
        $this->container['cloud_storage_container'] = $cloud_storage_container;

        return $this;
    }

    /**
     * Gets attributes
     * @return \Swagger\Client\Model\ServiceAttribute[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Swagger\Client\Model\ServiceAttribute[] $attributes Array of the service attributes. For example, <code>MYSQL_PORT</code>, <code>CLOUD_STORAGE_CONTAINER</code>, <code>LOCAL_BACKUP_VOLUME_SIZE</code>, etc.
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets components
     * @return \Swagger\Client\Model\ViewServiceComponent[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     * @param \Swagger\Client\Model\ViewServiceComponent[] $components details of each service component.
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets activity_logs
     * @return \Swagger\Client\Model\ViewActivityLog[]
     */
    public function getActivityLogs()
    {
        return $this->container['activity_logs'];
    }

    /**
     * Sets activity_logs
     * @param \Swagger\Client\Model\ViewActivityLog[] $activity_logs activities of the service instance.
     * @return $this
     */
    public function setActivityLogs($activity_logs)
    {
        $this->container['activity_logs'] = $activity_logs;

        return $this;
    }

    /**
     * Gets service_level_display_name
     * @return string
     */
    public function getServiceLevelDisplayName()
    {
        return $this->container['service_level_display_name'];
    }

    /**
     * Sets service_level_display_name
     * @param string $service_level_display_name The display name of the service level. For example, <code>Oracle MySQL Cloud Service</code>.
     * @return $this
     */
    public function setServiceLevelDisplayName($service_level_display_name)
    {
        $this->container['service_level_display_name'] = $service_level_display_name;

        return $this;
    }

    /**
     * Gets edition_display_name
     * @return string
     */
    public function getEditionDisplayName()
    {
        return $this->container['edition_display_name'];
    }

    /**
     * Sets edition_display_name
     * @param string $edition_display_name The display name of MySQL Server edition. For example, <code>Enterprise Edition</code>.
     * @return $this
     */
    public function setEditionDisplayName($edition_display_name)
    {
        $this->container['edition_display_name'] = $edition_display_name;

        return $this;
    }

    /**
     * Gets metering_frequency_display_name
     * @return string
     */
    public function getMeteringFrequencyDisplayName()
    {
        return $this->container['metering_frequency_display_name'];
    }

    /**
     * Sets metering_frequency_display_name
     * @param string $metering_frequency_display_name The display name of the metering frequency; either <code>Monthly</code> or <code>Hourly</code>.
     * @return $this
     */
    public function setMeteringFrequencyDisplayName($metering_frequency_display_name)
    {
        $this->container['metering_frequency_display_name'] = $metering_frequency_display_name;

        return $this;
    }

    /**
     * Gets data_volume_size
     * @return string
     */
    public function getDataVolumeSize()
    {
        return $this->container['data_volume_size'];
    }

    /**
     * Sets data_volume_size
     * @param string $data_volume_size Storage volume size for MySQL data.
     * @return $this
     */
    public function setDataVolumeSize($data_volume_size)
    {
        $this->container['data_volume_size'] = $data_volume_size;

        return $this;
    }

    /**
     * Gets mysql_port
     * @return string
     */
    public function getMysqlPort()
    {
        return $this->container['mysql_port'];
    }

    /**
     * Sets mysql_port
     * @param string $mysql_port The listener port for MySQL server.
     * @return $this
     */
    public function setMysqlPort($mysql_port)
    {
        $this->container['mysql_port'] = $mysql_port;

        return $this;
    }

    /**
     * Gets backup_destination
     * @return string
     */
    public function getBackupDestination()
    {
        return $this->container['backup_destination'];
    }

    /**
     * Sets backup_destination
     * @param string $backup_destination Backup destination; either <code>BOTH</code> - Both Cloud Storage and Local Storage, or <code>NONE</code> - None.
     * @return $this
     */
    public function setBackupDestination($backup_destination)
    {
        $this->container['backup_destination'] = $backup_destination;

        return $this;
    }

    /**
     * Gets cloud_storage_container
     * @return string
     */
    public function getCloudStorageContainer()
    {
        return $this->container['cloud_storage_container'];
    }

    /**
     * Sets cloud_storage_container
     * @param string $cloud_storage_container Name of the Oracle Storage Cloud Service container used to provide storage for MySQL service instance backups.
     * @return $this
     */
    public function setCloudStorageContainer($cloud_storage_container)
    {
        $this->container['cloud_storage_container'] = $cloud_storage_container;

        return $this;
    }

    /**
     * Gets local_backup_volume_mount
     * @return string
     */
    public function getLocalBackupVolumeMount()
    {
        return $this->container['local_backup_volume_mount'];
    }

    /**
     * Sets local_backup_volume_mount
     * @param string $local_backup_volume_mount The volume mount point for local backups.
     * @return $this
     */
    public function setLocalBackupVolumeMount($local_backup_volume_mount)
    {
        $this->container['local_backup_volume_mount'] = $local_backup_volume_mount;

        return $this;
    }

    /**
     * Gets local_backup_volume_size
     * @return string
     */
    public function getLocalBackupVolumeSize()
    {
        return $this->container['local_backup_volume_size'];
    }

    /**
     * Sets local_backup_volume_size
     * @param string $local_backup_volume_size Storage volume size for MySQL local backups.
     * @return $this
     */
    public function setLocalBackupVolumeSize($local_backup_volume_size)
    {
        $this->container['local_backup_volume_size'] = $local_backup_volume_size;

        return $this;
    }

    /**
     * Gets total_shared_storage
     * @return string
     */
    public function getTotalSharedStorage()
    {
        return $this->container['total_shared_storage'];
    }

    /**
     * Sets total_shared_storage
     * @param string $total_shared_storage The total shared storage size; always <code>0</code> for MySQL Cloud Service.
     * @return $this
     */
    public function setTotalSharedStorage($total_shared_storage)
    {
        $this->container['total_shared_storage'] = $total_shared_storage;

        return $this;
    }

    /**
     * Gets service_state_display_name
     * @return string
     */
    public function getServiceStateDisplayName()
    {
        return $this->container['service_state_display_name'];
    }

    /**
     * Sets service_state_display_name
     * @param string $service_state_display_name The display name of the service current state.
     * @return $this
     */
    public function setServiceStateDisplayName($service_state_display_name)
    {
        $this->container['service_state_display_name'] = $service_state_display_name;

        return $this;
    }

    /**
     * Gets compute_site_name
     * @return string
     */
    public function getComputeSiteName()
    {
        return $this->container['compute_site_name'];
    }

    /**
     * Sets compute_site_name
     * @param string $compute_site_name The Oracle Cloud location housing the service instance.
     * @return $this
     */
    public function setComputeSiteName($compute_site_name)
    {
        $this->container['compute_site_name'] = $compute_site_name;

        return $this;
    }

    /**
     * Gets patching
     * @return \Swagger\Client\Model\ViewServicePatching
     */
    public function getPatching()
    {
        return $this->container['patching'];
    }

    /**
     * Sets patching
     * @param \Swagger\Client\Model\ViewServicePatching $patching
     * @return $this
     */
    public function setPatching($patching)
    {
        $this->container['patching'] = $patching;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


