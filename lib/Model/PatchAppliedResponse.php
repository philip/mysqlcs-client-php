<?php
/**
 * PatchAppliedResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PatchAppliedResponse Class Doc Comment
 *
 * @category    Class */
 // @description Information about an applied patch.
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PatchAppliedResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'patch-applied-response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'backup_status' => 'string',
        'additional_note' => 'string',
        'applied_by' => 'string',
        'applied_date' => 'string',
        'total_time' => 'string',
        'patch_id' => 'string',
        'patch_description' => 'string',
        'patch_release_url' => 'string',
        'release_date' => 'string',
        'result_message' => 'string',
        'last_status' => 'string',
        'last_status_message' => 'string',
        'component_patches' => '\Swagger\Client\Model\PatchComponentDetailsInfo[]',
        'patch_components' => '\Swagger\Client\Model\PatchComponentAppliedInfo[]',
        'patch_type' => 'string',
        'patch_category' => 'string',
        'patch_severity' => 'string',
        'job_id' => 'string',
        'display_name' => 'string',
        'to_version' => 'string',
        'backup_id' => 'string',
        'in_progress' => 'bool',
        'operation_type' => 'string',
        'id' => 'int',
        'patching_result' => '\Swagger\Client\Model\PatchResultInfo',
        'rollback_result' => '\Swagger\Client\Model\PatchRollbackResult',
        'rollback_id' => 'string',
        'rollback_version' => 'string',
        'current_patch_level' => 'string',
        'progress_messages' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'backup_status' => 'backupStatus',
        'additional_note' => 'additionalNote',
        'applied_by' => 'appliedBy',
        'applied_date' => 'appliedDate',
        'total_time' => 'totalTime',
        'patch_id' => 'patchId',
        'patch_description' => 'patchDescription',
        'patch_release_url' => 'patchReleaseUrl',
        'release_date' => 'releaseDate',
        'result_message' => 'resultMessage',
        'last_status' => 'lastStatus',
        'last_status_message' => 'lastStatusMessage',
        'component_patches' => 'componentPatches',
        'patch_components' => 'patchComponents',
        'patch_type' => 'patchType',
        'patch_category' => 'patchCategory',
        'patch_severity' => 'patchSeverity',
        'job_id' => 'jobId',
        'display_name' => 'displayName',
        'to_version' => 'toVersion',
        'backup_id' => 'backupId',
        'in_progress' => 'inProgress',
        'operation_type' => 'operationType',
        'id' => 'id',
        'patching_result' => 'patchingResult',
        'rollback_result' => 'rollbackResult',
        'rollback_id' => 'rollbackId',
        'rollback_version' => 'rollbackVersion',
        'current_patch_level' => 'currentPatchLevel',
        'progress_messages' => 'progressMessages'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'backup_status' => 'setBackupStatus',
        'additional_note' => 'setAdditionalNote',
        'applied_by' => 'setAppliedBy',
        'applied_date' => 'setAppliedDate',
        'total_time' => 'setTotalTime',
        'patch_id' => 'setPatchId',
        'patch_description' => 'setPatchDescription',
        'patch_release_url' => 'setPatchReleaseUrl',
        'release_date' => 'setReleaseDate',
        'result_message' => 'setResultMessage',
        'last_status' => 'setLastStatus',
        'last_status_message' => 'setLastStatusMessage',
        'component_patches' => 'setComponentPatches',
        'patch_components' => 'setPatchComponents',
        'patch_type' => 'setPatchType',
        'patch_category' => 'setPatchCategory',
        'patch_severity' => 'setPatchSeverity',
        'job_id' => 'setJobId',
        'display_name' => 'setDisplayName',
        'to_version' => 'setToVersion',
        'backup_id' => 'setBackupId',
        'in_progress' => 'setInProgress',
        'operation_type' => 'setOperationType',
        'id' => 'setId',
        'patching_result' => 'setPatchingResult',
        'rollback_result' => 'setRollbackResult',
        'rollback_id' => 'setRollbackId',
        'rollback_version' => 'setRollbackVersion',
        'current_patch_level' => 'setCurrentPatchLevel',
        'progress_messages' => 'setProgressMessages'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'backup_status' => 'getBackupStatus',
        'additional_note' => 'getAdditionalNote',
        'applied_by' => 'getAppliedBy',
        'applied_date' => 'getAppliedDate',
        'total_time' => 'getTotalTime',
        'patch_id' => 'getPatchId',
        'patch_description' => 'getPatchDescription',
        'patch_release_url' => 'getPatchReleaseUrl',
        'release_date' => 'getReleaseDate',
        'result_message' => 'getResultMessage',
        'last_status' => 'getLastStatus',
        'last_status_message' => 'getLastStatusMessage',
        'component_patches' => 'getComponentPatches',
        'patch_components' => 'getPatchComponents',
        'patch_type' => 'getPatchType',
        'patch_category' => 'getPatchCategory',
        'patch_severity' => 'getPatchSeverity',
        'job_id' => 'getJobId',
        'display_name' => 'getDisplayName',
        'to_version' => 'getToVersion',
        'backup_id' => 'getBackupId',
        'in_progress' => 'getInProgress',
        'operation_type' => 'getOperationType',
        'id' => 'getId',
        'patching_result' => 'getPatchingResult',
        'rollback_result' => 'getRollbackResult',
        'rollback_id' => 'getRollbackId',
        'rollback_version' => 'getRollbackVersion',
        'current_patch_level' => 'getCurrentPatchLevel',
        'progress_messages' => 'getProgressMessages'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_status'] = isset($data['backup_status']) ? $data['backup_status'] : null;
        $this->container['additional_note'] = isset($data['additional_note']) ? $data['additional_note'] : null;
        $this->container['applied_by'] = isset($data['applied_by']) ? $data['applied_by'] : null;
        $this->container['applied_date'] = isset($data['applied_date']) ? $data['applied_date'] : null;
        $this->container['total_time'] = isset($data['total_time']) ? $data['total_time'] : null;
        $this->container['patch_id'] = isset($data['patch_id']) ? $data['patch_id'] : null;
        $this->container['patch_description'] = isset($data['patch_description']) ? $data['patch_description'] : null;
        $this->container['patch_release_url'] = isset($data['patch_release_url']) ? $data['patch_release_url'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['result_message'] = isset($data['result_message']) ? $data['result_message'] : null;
        $this->container['last_status'] = isset($data['last_status']) ? $data['last_status'] : null;
        $this->container['last_status_message'] = isset($data['last_status_message']) ? $data['last_status_message'] : null;
        $this->container['component_patches'] = isset($data['component_patches']) ? $data['component_patches'] : null;
        $this->container['patch_components'] = isset($data['patch_components']) ? $data['patch_components'] : null;
        $this->container['patch_type'] = isset($data['patch_type']) ? $data['patch_type'] : null;
        $this->container['patch_category'] = isset($data['patch_category']) ? $data['patch_category'] : null;
        $this->container['patch_severity'] = isset($data['patch_severity']) ? $data['patch_severity'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['to_version'] = isset($data['to_version']) ? $data['to_version'] : null;
        $this->container['backup_id'] = isset($data['backup_id']) ? $data['backup_id'] : null;
        $this->container['in_progress'] = isset($data['in_progress']) ? $data['in_progress'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['patching_result'] = isset($data['patching_result']) ? $data['patching_result'] : null;
        $this->container['rollback_result'] = isset($data['rollback_result']) ? $data['rollback_result'] : null;
        $this->container['rollback_id'] = isset($data['rollback_id']) ? $data['rollback_id'] : null;
        $this->container['rollback_version'] = isset($data['rollback_version']) ? $data['rollback_version'] : null;
        $this->container['current_patch_level'] = isset($data['current_patch_level']) ? $data['current_patch_level'] : null;
        $this->container['progress_messages'] = isset($data['progress_messages']) ? $data['progress_messages'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets backup_status
     * @return string
     */
    public function getBackupStatus()
    {
        return $this->container['backup_status'];
    }

    /**
     * Sets backup_status
     * @param string $backup_status Whether a backup of the software was created before the patch was applied. Valid values include: <code>Available</code>, <code>SameVersion</code>, <code>Unavailable</code>, <code>Unknown</code>.
     * @return $this
     */
    public function setBackupStatus($backup_status)
    {
        $this->container['backup_status'] = $backup_status;

        return $this;
    }

    /**
     * Gets additional_note
     * @return string
     */
    public function getAdditionalNote()
    {
        return $this->container['additional_note'];
    }

    /**
     * Sets additional_note
     * @param string $additional_note Free-form text to provide additional information about the patch.
     * @return $this
     */
    public function setAdditionalNote($additional_note)
    {
        $this->container['additional_note'] = $additional_note;

        return $this;
    }

    /**
     * Gets applied_by
     * @return string
     */
    public function getAppliedBy()
    {
        return $this->container['applied_by'];
    }

    /**
     * Sets applied_by
     * @param string $applied_by Name of the user that applied the patch. <code>system</code> displays if the patch was applied by an auto-update scheduled job.
     * @return $this
     */
    public function setAppliedBy($applied_by)
    {
        $this->container['applied_by'] = $applied_by;

        return $this;
    }

    /**
     * Gets applied_date
     * @return string
     */
    public function getAppliedDate()
    {
        return $this->container['applied_date'];
    }

    /**
     * Sets applied_date
     * @param string $applied_date Date and time that the patch was applied.
     * @return $this
     */
    public function setAppliedDate($applied_date)
    {
        $this->container['applied_date'] = $applied_date;

        return $this;
    }

    /**
     * Gets total_time
     * @return string
     */
    public function getTotalTime()
    {
        return $this->container['total_time'];
    }

    /**
     * Sets total_time
     * @param string $total_time Duration of the patch operation.
     * @return $this
     */
    public function setTotalTime($total_time)
    {
        $this->container['total_time'] = $total_time;

        return $this;
    }

    /**
     * Gets patch_id
     * @return string
     */
    public function getPatchId()
    {
        return $this->container['patch_id'];
    }

    /**
     * Sets patch_id
     * @param string $patch_id Patch ID.
     * @return $this
     */
    public function setPatchId($patch_id)
    {
        $this->container['patch_id'] = $patch_id;

        return $this;
    }

    /**
     * Gets patch_description
     * @return string
     */
    public function getPatchDescription()
    {
        return $this->container['patch_description'];
    }

    /**
     * Sets patch_description
     * @param string $patch_description Description of the patch.
     * @return $this
     */
    public function setPatchDescription($patch_description)
    {
        $this->container['patch_description'] = $patch_description;

        return $this;
    }

    /**
     * Gets patch_release_url
     * @return string
     */
    public function getPatchReleaseUrl()
    {
        return $this->container['patch_release_url'];
    }

    /**
     * Sets patch_release_url
     * @param string $patch_release_url URL that provides more information about the patch.
     * @return $this
     */
    public function setPatchReleaseUrl($patch_release_url)
    {
        $this->container['patch_release_url'] = $patch_release_url;

        return $this;
    }

    /**
     * Gets release_date
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     * @param string $release_date Date and time patch was released.
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets result_message
     * @return string
     */
    public function getResultMessage()
    {
        return $this->container['result_message'];
    }

    /**
     * Sets result_message
     * @param string $result_message Patch results message.
     * @return $this
     */
    public function setResultMessage($result_message)
    {
        $this->container['result_message'] = $result_message;

        return $this;
    }

    /**
     * Gets last_status
     * @return string
     */
    public function getLastStatus()
    {
        return $this->container['last_status'];
    }

    /**
     * Sets last_status
     * @param string $last_status Status of the patch operation. For example: <code>IN PROGRESS</code>, <code>COMPLETED</code>, and <code>FAILED</code>. <code>COMPLETED_ROLLBACK</code> is displayed when an applied patch has been rolled back.
     * @return $this
     */
    public function setLastStatus($last_status)
    {
        $this->container['last_status'] = $last_status;

        return $this;
    }

    /**
     * Gets last_status_message
     * @return string
     */
    public function getLastStatusMessage()
    {
        return $this->container['last_status_message'];
    }

    /**
     * Sets last_status_message
     * @param string $last_status_message Last message logged for the patch operation.
     * @return $this
     */
    public function setLastStatusMessage($last_status_message)
    {
        $this->container['last_status_message'] = $last_status_message;

        return $this;
    }

    /**
     * Gets component_patches
     * @return \Swagger\Client\Model\PatchComponentDetailsInfo[]
     */
    public function getComponentPatches()
    {
        return $this->container['component_patches'];
    }

    /**
     * Sets component_patches
     * @param \Swagger\Client\Model\PatchComponentDetailsInfo[] $component_patches Group the details of each patches in the component.
     * @return $this
     */
    public function setComponentPatches($component_patches)
    {
        $this->container['component_patches'] = $component_patches;

        return $this;
    }

    /**
     * Gets patch_components
     * @return \Swagger\Client\Model\PatchComponentAppliedInfo[]
     */
    public function getPatchComponents()
    {
        return $this->container['patch_components'];
    }

    /**
     * Sets patch_components
     * @param \Swagger\Client\Model\PatchComponentAppliedInfo[] $patch_components Group the details of the patch to be applied.
     * @return $this
     */
    public function setPatchComponents($patch_components)
    {
        $this->container['patch_components'] = $patch_components;

        return $this;
    }

    /**
     * Gets patch_type
     * @return string
     */
    public function getPatchType()
    {
        return $this->container['patch_type'];
    }

    /**
     * Sets patch_type
     * @param string $patch_type Patch type classification. For example, <code>Quarterly</Code>, <code>Security</Code>.
     * @return $this
     */
    public function setPatchType($patch_type)
    {
        $this->container['patch_type'] = $patch_type;

        return $this;
    }

    /**
     * Gets patch_category
     * @return string
     */
    public function getPatchCategory()
    {
        return $this->container['patch_category'];
    }

    /**
     * Sets patch_category
     * @param string $patch_category Category of the patch. For example: <code>General</code>, <code>Multiple</code>, <code>Security</code>, and so on.
     * @return $this
     */
    public function setPatchCategory($patch_category)
    {
        $this->container['patch_category'] = $patch_category;

        return $this;
    }

    /**
     * Gets patch_severity
     * @return string
     */
    public function getPatchSeverity()
    {
        return $this->container['patch_severity'];
    }

    /**
     * Sets patch_severity
     * @param string $patch_severity Severity of the patch. For example <code>Normal</code>, <code>Mandatory</code>, <code>Recommended</code>, and so on.
     * @return $this
     */
    public function setPatchSeverity($patch_severity)
    {
        $this->container['patch_severity'] = $patch_severity;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id Job ID for the patch operation.
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Display name of the patch.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets to_version
     * @return string
     */
    public function getToVersion()
    {
        return $this->container['to_version'];
    }

    /**
     * Sets to_version
     * @param string $to_version Version of Oracle MySQL Cloud Service instance that was patched.
     * @return $this
     */
    public function setToVersion($to_version)
    {
        $this->container['to_version'] = $to_version;

        return $this;
    }

    /**
     * Gets backup_id
     * @return string
     */
    public function getBackupId()
    {
        return $this->container['backup_id'];
    }

    /**
     * Sets backup_id
     * @param string $backup_id Backup ID. You can use the backup ID to manage the backup.
     * @return $this
     */
    public function setBackupId($backup_id)
    {
        $this->container['backup_id'] = $backup_id;

        return $this;
    }

    /**
     * Gets in_progress
     * @return bool
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     * @param bool $in_progress Flag that specifies whether the patch is still in progress.
     * @return $this
     */
    public function setInProgress($in_progress)
    {
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets operation_type
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param string $operation_type Patch operating being performed. Valid values include: <code>Rollback</code>, <code>Patching</code>, and <code>None</code>.
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique ID of the patching operation. Use this ID to get details of a patching operation.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets patching_result
     * @return \Swagger\Client\Model\PatchResultInfo
     */
    public function getPatchingResult()
    {
        return $this->container['patching_result'];
    }

    /**
     * Sets patching_result
     * @param \Swagger\Client\Model\PatchResultInfo $patching_result
     * @return $this
     */
    public function setPatchingResult($patching_result)
    {
        $this->container['patching_result'] = $patching_result;

        return $this;
    }

    /**
     * Gets rollback_result
     * @return \Swagger\Client\Model\PatchRollbackResult
     */
    public function getRollbackResult()
    {
        return $this->container['rollback_result'];
    }

    /**
     * Sets rollback_result
     * @param \Swagger\Client\Model\PatchRollbackResult $rollback_result
     * @return $this
     */
    public function setRollbackResult($rollback_result)
    {
        $this->container['rollback_result'] = $rollback_result;

        return $this;
    }

    /**
     * Gets rollback_id
     * @return string
     */
    public function getRollbackId()
    {
        return $this->container['rollback_id'];
    }

    /**
     * Sets rollback_id
     * @param string $rollback_id ID of the rollback that is associated to the completed patching operation. The ID is used to rollback a patch operation.
     * @return $this
     */
    public function setRollbackId($rollback_id)
    {
        $this->container['rollback_id'] = $rollback_id;

        return $this;
    }

    /**
     * Gets rollback_version
     * @return string
     */
    public function getRollbackVersion()
    {
        return $this->container['rollback_version'];
    }

    /**
     * Sets rollback_version
     * @param string $rollback_version Version to which the patched component will be rolled back.
     * @return $this
     */
    public function setRollbackVersion($rollback_version)
    {
        $this->container['rollback_version'] = $rollback_version;

        return $this;
    }

    /**
     * Gets current_patch_level
     * @return string
     */
    public function getCurrentPatchLevel()
    {
        return $this->container['current_patch_level'];
    }

    /**
     * Sets current_patch_level
     * @param string $current_patch_level Current patch level for the component.
     * @return $this
     */
    public function setCurrentPatchLevel($current_patch_level)
    {
        $this->container['current_patch_level'] = $current_patch_level;

        return $this;
    }

    /**
     * Gets progress_messages
     * @return string[]
     */
    public function getProgressMessages()
    {
        return $this->container['progress_messages'];
    }

    /**
     * Sets progress_messages
     * @param string[] $progress_messages List of progress messages for the patch.
     * @return $this
     */
    public function setProgressMessages($progress_messages)
    {
        $this->container['progress_messages'] = $progress_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


