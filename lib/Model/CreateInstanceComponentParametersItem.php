<?php
/**
 * CreateInstanceComponentParametersItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateInstanceComponentParametersItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateInstanceComponentParametersItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'create-instance-component-parameters-item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'shape' => 'string',
        'mysql_user_name' => 'string',
        'mysql_user_password' => 'string',
        'mysql_port' => 'string',
        'mysql_em_port' => 'string',
        'db_storage' => 'int',
        'db_name' => 'string',
        'mysql_charset' => 'string',
        'mysql_collation' => 'string',
        'enterprise_monitor' => 'string',
        'enterprise_monitor_manager_user' => 'string',
        'enterprise_monitor_manager_password' => 'string',
        'enterprise_monitor_agent_user' => 'string',
        'enterprise_monitor_agent_password' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'shape' => 'shape',
        'mysql_user_name' => 'mysqlUserName',
        'mysql_user_password' => 'mysqlUserPassword',
        'mysql_port' => 'mysqlPort',
        'mysql_em_port' => 'mysqlEMPort',
        'db_storage' => 'dbStorage',
        'db_name' => 'dbName',
        'mysql_charset' => 'mysqlCharset',
        'mysql_collation' => 'mysqlCollation',
        'enterprise_monitor' => 'enterpriseMonitor',
        'enterprise_monitor_manager_user' => 'enterpriseMonitorManagerUser',
        'enterprise_monitor_manager_password' => 'enterpriseMonitorManagerPassword',
        'enterprise_monitor_agent_user' => 'enterpriseMonitorAgentUser',
        'enterprise_monitor_agent_password' => 'enterpriseMonitorAgentPassword'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'shape' => 'setShape',
        'mysql_user_name' => 'setMysqlUserName',
        'mysql_user_password' => 'setMysqlUserPassword',
        'mysql_port' => 'setMysqlPort',
        'mysql_em_port' => 'setMysqlEmPort',
        'db_storage' => 'setDbStorage',
        'db_name' => 'setDbName',
        'mysql_charset' => 'setMysqlCharset',
        'mysql_collation' => 'setMysqlCollation',
        'enterprise_monitor' => 'setEnterpriseMonitor',
        'enterprise_monitor_manager_user' => 'setEnterpriseMonitorManagerUser',
        'enterprise_monitor_manager_password' => 'setEnterpriseMonitorManagerPassword',
        'enterprise_monitor_agent_user' => 'setEnterpriseMonitorAgentUser',
        'enterprise_monitor_agent_password' => 'setEnterpriseMonitorAgentPassword'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'shape' => 'getShape',
        'mysql_user_name' => 'getMysqlUserName',
        'mysql_user_password' => 'getMysqlUserPassword',
        'mysql_port' => 'getMysqlPort',
        'mysql_em_port' => 'getMysqlEmPort',
        'db_storage' => 'getDbStorage',
        'db_name' => 'getDbName',
        'mysql_charset' => 'getMysqlCharset',
        'mysql_collation' => 'getMysqlCollation',
        'enterprise_monitor' => 'getEnterpriseMonitor',
        'enterprise_monitor_manager_user' => 'getEnterpriseMonitorManagerUser',
        'enterprise_monitor_manager_password' => 'getEnterpriseMonitorManagerPassword',
        'enterprise_monitor_agent_user' => 'getEnterpriseMonitorAgentUser',
        'enterprise_monitor_agent_password' => 'getEnterpriseMonitorAgentPassword'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const ENTERPRISE_MONITOR_YES = 'Yes';
    const ENTERPRISE_MONITOR_NO = 'No';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEnterpriseMonitorAllowableValues()
    {
        return [
            self::ENTERPRISE_MONITOR_YES,
            self::ENTERPRISE_MONITOR_NO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shape'] = isset($data['shape']) ? $data['shape'] : null;
        $this->container['mysql_user_name'] = isset($data['mysql_user_name']) ? $data['mysql_user_name'] : null;
        $this->container['mysql_user_password'] = isset($data['mysql_user_password']) ? $data['mysql_user_password'] : null;
        $this->container['mysql_port'] = isset($data['mysql_port']) ? $data['mysql_port'] : null;
        $this->container['mysql_em_port'] = isset($data['mysql_em_port']) ? $data['mysql_em_port'] : null;
        $this->container['db_storage'] = isset($data['db_storage']) ? $data['db_storage'] : null;
        $this->container['db_name'] = isset($data['db_name']) ? $data['db_name'] : null;
        $this->container['mysql_charset'] = isset($data['mysql_charset']) ? $data['mysql_charset'] : null;
        $this->container['mysql_collation'] = isset($data['mysql_collation']) ? $data['mysql_collation'] : null;
        $this->container['enterprise_monitor'] = isset($data['enterprise_monitor']) ? $data['enterprise_monitor'] : 'No';
        $this->container['enterprise_monitor_manager_user'] = isset($data['enterprise_monitor_manager_user']) ? $data['enterprise_monitor_manager_user'] : null;
        $this->container['enterprise_monitor_manager_password'] = isset($data['enterprise_monitor_manager_password']) ? $data['enterprise_monitor_manager_password'] : null;
        $this->container['enterprise_monitor_agent_user'] = isset($data['enterprise_monitor_agent_user']) ? $data['enterprise_monitor_agent_user'] : null;
        $this->container['enterprise_monitor_agent_password'] = isset($data['enterprise_monitor_agent_password']) ? $data['enterprise_monitor_agent_password'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['mysql_user_name'] === null) {
            $invalid_properties[] = "'mysql_user_name' can't be null";
        }
        if ($this->container['mysql_user_password'] === null) {
            $invalid_properties[] = "'mysql_user_password' can't be null";
        }
        $allowed_values = array("Yes", "No");
        if (!in_array($this->container['enterprise_monitor'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'enterprise_monitor', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['mysql_user_name'] === null) {
            return false;
        }
        if ($this->container['mysql_user_password'] === null) {
            return false;
        }
        $allowed_values = array("Yes", "No");
        if (!in_array($this->container['enterprise_monitor'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets shape
     * @return string
     */
    public function getShape()
    {
        return $this->container['shape'];
    }

    /**
     * Sets shape
     * @param string $shape Desired compute shape. A shape defines the number of Oracle Compute Units (OCPUs) and amount of memory (RAM). Valid shapes include: <ul><li>oc3: 1 OCPU, 7.5 GB memory</li><li>oc4: 2 OCPUs, 15 GB memory</li><li>oc5: 4 OCPUs, 30 GB memory</li><li>oc6: 8 OCPUs, 60 GB memory</li><li>oc7: 16 OCPUs, 120 GB memory</li><li>oc1m: 1 OCPU, 15 GB memory</li><li>oc2m: 2 OCPUs, 30 GB memory</li><li>oc3m: 4 OCPUs, 60 GB memory</li><li>oc4m: 8 OCPUs, 120 GB memory</li><li>oc5m: 16 OCPUs, 240 GB memory</li></ul>.<p>See <a href='http://www.oracle.com/pls/topic/lookup?ctx=cloud&id=OCSUG210' target='_blank'>About Shapes</a> in <i>Using Oracle Compute Cloud Service</i> for more information about shapes.
     * @return $this
     */
    public function setShape($shape)
    {
        $this->container['shape'] = $shape;

        return $this;
    }

    /**
     * Gets mysql_user_name
     * @return string
     */
    public function getMysqlUserName()
    {
        return $this->container['mysql_user_name'];
    }

    /**
     * Sets mysql_user_name
     * @param string $mysql_user_name Administration user for connecting to the service via the MySQL protocol. User name should start with a letter, consist of letters and numbers, and be between 2 to 32 characters. The default is <code>root</code>.
     * @return $this
     */
    public function setMysqlUserName($mysql_user_name)
    {
        $this->container['mysql_user_name'] = $mysql_user_name;

        return $this;
    }

    /**
     * Gets mysql_user_password
     * @return string
     */
    public function getMysqlUserPassword()
    {
        return $this->container['mysql_user_password'];
    }

    /**
     * Sets mysql_user_password
     * @param string $mysql_user_password Password for MySQL administration user. The password must meet the following requirements:<ul><li>Starts with a letter</li><li>Is between 8 and 30 characters long</li><li>Contains letters, at least one number, and optionally, any number of these special characters: dollar sign ($), pound sign (#), and underscore (_).</li></ul>
     * @return $this
     */
    public function setMysqlUserPassword($mysql_user_password)
    {
        $this->container['mysql_user_password'] = $mysql_user_password;

        return $this;
    }

    /**
     * Gets mysql_port
     * @return string
     */
    public function getMysqlPort()
    {
        return $this->container['mysql_port'];
    }

    /**
     * Sets mysql_port
     * @param string $mysql_port Port for the MySQL server. Port must be in the range of 3200-3399. The default is <code>3306</code>.
     * @return $this
     */
    public function setMysqlPort($mysql_port)
    {
        $this->container['mysql_port'] = $mysql_port;

        return $this;
    }

    /**
     * Gets mysql_em_port
     * @return string
     */
    public function getMysqlEmPort()
    {
        return $this->container['mysql_em_port'];
    }

    /**
     * Sets mysql_em_port
     * @param string $mysql_em_port Port for the MySQL Enterprise Monitor. The default is <code>18443</code>.
     * @return $this
     */
    public function setMysqlEmPort($mysql_em_port)
    {
        $this->container['mysql_em_port'] = $mysql_em_port;

        return $this;
    }

    /**
     * Gets db_storage
     * @return int
     */
    public function getDbStorage()
    {
        return $this->container['db_storage'];
    }

    /**
     * Sets db_storage
     * @param int $db_storage Storage volume size for MySQL data. The number must be between 25 and 1024 GB. Default value is 25.
     * @return $this
     */
    public function setDbStorage($db_storage)
    {
        $this->container['db_storage'] = $db_storage;

        return $this;
    }

    /**
     * Gets db_name
     * @return string
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     * @param string $db_name Initial database schema name of your choice, up to 64 characters; can contain letters, numbers and special characters (_,$). The default name is <code>mydatabase</code>.
     * @return $this
     */
    public function setDbName($db_name)
    {
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets mysql_charset
     * @return string
     */
    public function getMysqlCharset()
    {
        return $this->container['mysql_charset'];
    }

    /**
     * Sets mysql_charset
     * @param string $mysql_charset MySQL server character set. See <a href='http://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html'>Supported Character Sets and Collations</a> for the character sets MySQL supports.
     * @return $this
     */
    public function setMysqlCharset($mysql_charset)
    {
        $this->container['mysql_charset'] = $mysql_charset;

        return $this;
    }

    /**
     * Gets mysql_collation
     * @return string
     */
    public function getMysqlCollation()
    {
        return $this->container['mysql_collation'];
    }

    /**
     * Sets mysql_collation
     * @param string $mysql_collation MySQL server collation. See <a href='http://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html'>Supported Character Sets and Collations</a> for the permissible collations of each character set.
     * @return $this
     */
    public function setMysqlCollation($mysql_collation)
    {
        $this->container['mysql_collation'] = $mysql_collation;

        return $this;
    }

    /**
     * Gets enterprise_monitor
     * @return string
     */
    public function getEnterpriseMonitor()
    {
        return $this->container['enterprise_monitor'];
    }

    /**
     * Sets enterprise_monitor
     * @param string $enterprise_monitor Indicate whether to configure MySQL Enterprise Monitor during provisioning. The value can only be one of the valid choices, either <code>Yes</code> or <code>No</code> and the default is <code>No</code>.
     * @return $this
     */
    public function setEnterpriseMonitor($enterprise_monitor)
    {
        $allowed_values = array('Yes', 'No');
        if (!in_array($enterprise_monitor, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'enterprise_monitor', must be one of 'Yes', 'No'");
        }
        $this->container['enterprise_monitor'] = $enterprise_monitor;

        return $this;
    }

    /**
     * Gets enterprise_monitor_manager_user
     * @return string
     */
    public function getEnterpriseMonitorManagerUser()
    {
        return $this->container['enterprise_monitor_manager_user'];
    }

    /**
     * Sets enterprise_monitor_manager_user
     * @param string $enterprise_monitor_manager_user Name for the Enterprise Monitor manager user. Manager User name should start with a letter, consist of letters and numbers, and be between 2 to 32 characters.
     * @return $this
     */
    public function setEnterpriseMonitorManagerUser($enterprise_monitor_manager_user)
    {
        $this->container['enterprise_monitor_manager_user'] = $enterprise_monitor_manager_user;

        return $this;
    }

    /**
     * Gets enterprise_monitor_manager_password
     * @return string
     */
    public function getEnterpriseMonitorManagerPassword()
    {
        return $this->container['enterprise_monitor_manager_password'];
    }

    /**
     * Sets enterprise_monitor_manager_password
     * @param string $enterprise_monitor_manager_password Password for MySQL Enterprise Monitor manager. The password must be at least 8 characters long with at least one lower case letter, one upper case letter, one number and one special character.
     * @return $this
     */
    public function setEnterpriseMonitorManagerPassword($enterprise_monitor_manager_password)
    {
        $this->container['enterprise_monitor_manager_password'] = $enterprise_monitor_manager_password;

        return $this;
    }

    /**
     * Gets enterprise_monitor_agent_user
     * @return string
     */
    public function getEnterpriseMonitorAgentUser()
    {
        return $this->container['enterprise_monitor_agent_user'];
    }

    /**
     * Sets enterprise_monitor_agent_user
     * @param string $enterprise_monitor_agent_user Name for the Enterprise Monitor agent user. Agent User name should start with a letter, consist of letters and numbers, and be between 2 to 32 characters.
     * @return $this
     */
    public function setEnterpriseMonitorAgentUser($enterprise_monitor_agent_user)
    {
        $this->container['enterprise_monitor_agent_user'] = $enterprise_monitor_agent_user;

        return $this;
    }

    /**
     * Gets enterprise_monitor_agent_password
     * @return string
     */
    public function getEnterpriseMonitorAgentPassword()
    {
        return $this->container['enterprise_monitor_agent_password'];
    }

    /**
     * Sets enterprise_monitor_agent_password
     * @param string $enterprise_monitor_agent_password Password for MySQL Enterprise Monitor agent. The password must be at least 8 characters long with at least one lower case letter, one upper case letter, one number and one special character.
     * @return $this
     */
    public function setEnterpriseMonitorAgentPassword($enterprise_monitor_agent_password)
    {
        $this->container['enterprise_monitor_agent_password'] = $enterprise_monitor_agent_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


