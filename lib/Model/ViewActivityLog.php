<?php
/**
 * ViewActivityLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ViewActivityLog Class Doc Comment
 *
 * @category    Class */
 // @description Activity logs of the operation.
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ViewActivityLog implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'view-activity-log';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'activity_log_id' => 'string',
        'service_name' => 'string',
        'service_type' => 'string',
        'identity_domain' => 'string',
        'service_id' => 'string',
        'job_id' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'status' => 'string',
        'operation_id' => 'string',
        'operation_type' => 'string',
        'summary_message' => 'string',
        'auth_domain' => 'string',
        'auth_user' => 'string',
        'initiated_by' => 'string',
        'messages' => '\Swagger\Client\Model\MessageItem[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'activity_log_id' => 'activityLogId',
        'service_name' => 'serviceName',
        'service_type' => 'serviceType',
        'identity_domain' => 'identityDomain',
        'service_id' => 'serviceId',
        'job_id' => 'jobId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'status' => 'status',
        'operation_id' => 'operationId',
        'operation_type' => 'operationType',
        'summary_message' => 'summaryMessage',
        'auth_domain' => 'authDomain',
        'auth_user' => 'authUser',
        'initiated_by' => 'initiatedBy',
        'messages' => 'messages'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'activity_log_id' => 'setActivityLogId',
        'service_name' => 'setServiceName',
        'service_type' => 'setServiceType',
        'identity_domain' => 'setIdentityDomain',
        'service_id' => 'setServiceId',
        'job_id' => 'setJobId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'status' => 'setStatus',
        'operation_id' => 'setOperationId',
        'operation_type' => 'setOperationType',
        'summary_message' => 'setSummaryMessage',
        'auth_domain' => 'setAuthDomain',
        'auth_user' => 'setAuthUser',
        'initiated_by' => 'setInitiatedBy',
        'messages' => 'setMessages'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'activity_log_id' => 'getActivityLogId',
        'service_name' => 'getServiceName',
        'service_type' => 'getServiceType',
        'identity_domain' => 'getIdentityDomain',
        'service_id' => 'getServiceId',
        'job_id' => 'getJobId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'status' => 'getStatus',
        'operation_id' => 'getOperationId',
        'operation_type' => 'getOperationType',
        'summary_message' => 'getSummaryMessage',
        'auth_domain' => 'getAuthDomain',
        'auth_user' => 'getAuthUser',
        'initiated_by' => 'getInitiatedBy',
        'messages' => 'getMessages'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_log_id'] = isset($data['activity_log_id']) ? $data['activity_log_id'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['identity_domain'] = isset($data['identity_domain']) ? $data['identity_domain'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['summary_message'] = isset($data['summary_message']) ? $data['summary_message'] : null;
        $this->container['auth_domain'] = isset($data['auth_domain']) ? $data['auth_domain'] : null;
        $this->container['auth_user'] = isset($data['auth_user']) ? $data['auth_user'] : null;
        $this->container['initiated_by'] = isset($data['initiated_by']) ? $data['initiated_by'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets activity_log_id
     * @return string
     */
    public function getActivityLogId()
    {
        return $this->container['activity_log_id'];
    }

    /**
     * Sets activity_log_id
     * @param string $activity_log_id The log ID of the operation.
     * @return $this
     */
    public function setActivityLogId($activity_log_id)
    {
        $this->container['activity_log_id'] = $activity_log_id;

        return $this;
    }

    /**
     * Gets service_name
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     * @param string $service_name The name of the instance.
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets service_type
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     * @param string $service_type The service type of the instance.
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets identity_domain
     * @return string
     */
    public function getIdentityDomain()
    {
        return $this->container['identity_domain'];
    }

    /**
     * Sets identity_domain
     * @param string $identity_domain The identity domain hosting the instance.
     * @return $this
     */
    public function setIdentityDomain($identity_domain)
    {
        $this->container['identity_domain'] = $identity_domain;

        return $this;
    }

    /**
     * Gets service_id
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     * @param string $service_id The corresponding ID of the MySQL Cloud Service instance.
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id The ID of the current job.
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date The date and time when the job started.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param string $end_date The date and time when the job ended.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status <p>Current status of the job; one of: <code>In Progress</code>, <code>Succeeded</code>, <code>Failed</code>.</p>
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets operation_id
     * @return string
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     * @param string $operation_id The corresponding ID of the operation.
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets operation_type
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param string $operation_type The type of the operation, such as <code>CREATE_SERVICE</code>.
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets summary_message
     * @return string
     */
    public function getSummaryMessage()
    {
        return $this->container['summary_message'];
    }

    /**
     * Sets summary_message
     * @param string $summary_message The summary of the activity log.
     * @return $this
     */
    public function setSummaryMessage($summary_message)
    {
        $this->container['summary_message'] = $summary_message;

        return $this;
    }

    /**
     * Gets auth_domain
     * @return string
     */
    public function getAuthDomain()
    {
        return $this->container['auth_domain'];
    }

    /**
     * Sets auth_domain
     * @param string $auth_domain Identity domain for the Oracle MySQL Cloud Service account.
     * @return $this
     */
    public function setAuthDomain($auth_domain)
    {
        $this->container['auth_domain'] = $auth_domain;

        return $this;
    }

    /**
     * Gets auth_user
     * @return string
     */
    public function getAuthUser()
    {
        return $this->container['auth_user'];
    }

    /**
     * Sets auth_user
     * @param string $auth_user The authentication user.
     * @return $this
     */
    public function setAuthUser($auth_user)
    {
        $this->container['auth_user'] = $auth_user;

        return $this;
    }

    /**
     * Gets initiated_by
     * @return string
     */
    public function getInitiatedBy()
    {
        return $this->container['initiated_by'];
    }

    /**
     * Sets initiated_by
     * @param string $initiated_by The user making the request.
     * @return $this
     */
    public function setInitiatedBy($initiated_by)
    {
        $this->container['initiated_by'] = $initiated_by;

        return $this;
    }

    /**
     * Gets messages
     * @return \Swagger\Client\Model\MessageItem[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     * @param \Swagger\Client\Model\MessageItem[] $messages Log details of the operation.
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


