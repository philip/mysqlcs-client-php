<?php
/**
 * BackupViewInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.18
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BackupViewInfo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BackupViewInfo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'backup-view-info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'start_time' => 'string',
        'end_time' => 'string',
        'start_lsn' => 'string',
        'end_lsn' => 'string',
        'last_bin_log' => 'string',
        'last_bin_log_pos' => 'string',
        'triggered_by' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'start_lsn' => 'startLSN',
        'end_lsn' => 'endLSN',
        'last_bin_log' => 'lastBinLog',
        'last_bin_log_pos' => 'lastBinLogPos',
        'triggered_by' => 'triggeredBy'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'start_lsn' => 'setStartLsn',
        'end_lsn' => 'setEndLsn',
        'last_bin_log' => 'setLastBinLog',
        'last_bin_log_pos' => 'setLastBinLogPos',
        'triggered_by' => 'setTriggeredBy'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'start_lsn' => 'getStartLsn',
        'end_lsn' => 'getEndLsn',
        'last_bin_log' => 'getLastBinLog',
        'last_bin_log_pos' => 'getLastBinLogPos',
        'triggered_by' => 'getTriggeredBy'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['start_lsn'] = isset($data['start_lsn']) ? $data['start_lsn'] : null;
        $this->container['end_lsn'] = isset($data['end_lsn']) ? $data['end_lsn'] : null;
        $this->container['last_bin_log'] = isset($data['last_bin_log']) ? $data['last_bin_log'] : null;
        $this->container['last_bin_log_pos'] = isset($data['last_bin_log_pos']) ? $data['last_bin_log_pos'] : null;
        $this->container['triggered_by'] = isset($data['triggered_by']) ? $data['triggered_by'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets start_time
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param string $start_time Date and time (as epoch) that the backup started.
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param string $end_time Date and time (as epoch) that the backup completed.
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets start_lsn
     * @return string
     */
    public function getStartLsn()
    {
        return $this->container['start_lsn'];
    }

    /**
     * Sets start_lsn
     * @param string $start_lsn The beginning LSN of the backup.
     * @return $this
     */
    public function setStartLsn($start_lsn)
    {
        $this->container['start_lsn'] = $start_lsn;

        return $this;
    }

    /**
     * Gets end_lsn
     * @return string
     */
    public function getEndLsn()
    {
        return $this->container['end_lsn'];
    }

    /**
     * Sets end_lsn
     * @param string $end_lsn The last LSN of the backup.
     * @return $this
     */
    public function setEndLsn($end_lsn)
    {
        $this->container['end_lsn'] = $end_lsn;

        return $this;
    }

    /**
     * Gets last_bin_log
     * @return string
     */
    public function getLastBinLog()
    {
        return $this->container['last_bin_log'];
    }

    /**
     * Sets last_bin_log
     * @param string $last_bin_log The name of the last binlog file.
     * @return $this
     */
    public function setLastBinLog($last_bin_log)
    {
        $this->container['last_bin_log'] = $last_bin_log;

        return $this;
    }

    /**
     * Gets last_bin_log_pos
     * @return string
     */
    public function getLastBinLogPos()
    {
        return $this->container['last_bin_log_pos'];
    }

    /**
     * Sets last_bin_log_pos
     * @param string $last_bin_log_pos The last binlog position.
     * @return $this
     */
    public function setLastBinLogPos($last_bin_log_pos)
    {
        $this->container['last_bin_log_pos'] = $last_bin_log_pos;

        return $this;
    }

    /**
     * Gets triggered_by
     * @return string
     */
    public function getTriggeredBy()
    {
        return $this->container['triggered_by'];
    }

    /**
     * Sets triggered_by
     * @param string $triggered_by The user account that initiated this operation. If the operation is a scheduled automated backup, the value is <code>scheduled</code>.
     * @return $this
     */
    public function setTriggeredBy($triggered_by)
    {
        $this->container['triggered_by'] = $triggered_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


