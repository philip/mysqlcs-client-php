<?php
/**
 * ViewPrecheckResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API for MySQL Cloud Service
 *
 * Use the REST API to manage MySQL Cloud Service instances
 *
 * OpenAPI spec version: 2017.01.09
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ViewPrecheckResponse Class Doc Comment
 *
 * @category    Class */
 // @description The response body includes information about the patch precheck. When viewing all patching prechecks, the response body includes information about all patch prechecks executed on this service instance.
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ViewPrecheckResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'view-precheck-response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'job_id' => 'string',
        'patch_id' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'performed_by' => 'string',
        'in_progress' => 'bool',
        'status' => 'string',
        'href' => 'string',
        'pre_check_messages' => 'string[]',
        'result_message' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'job_id' => 'jobId',
        'patch_id' => 'patchId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'performed_by' => 'performedBy',
        'in_progress' => 'inProgress',
        'status' => 'status',
        'href' => 'href',
        'pre_check_messages' => 'preCheckMessages',
        'result_message' => 'resultMessage'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'job_id' => 'setJobId',
        'patch_id' => 'setPatchId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'performed_by' => 'setPerformedBy',
        'in_progress' => 'setInProgress',
        'status' => 'setStatus',
        'href' => 'setHref',
        'pre_check_messages' => 'setPreCheckMessages',
        'result_message' => 'setResultMessage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'job_id' => 'getJobId',
        'patch_id' => 'getPatchId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'performed_by' => 'getPerformedBy',
        'in_progress' => 'getInProgress',
        'status' => 'getStatus',
        'href' => 'getHref',
        'pre_check_messages' => 'getPreCheckMessages',
        'result_message' => 'getResultMessage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['patch_id'] = isset($data['patch_id']) ? $data['patch_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['performed_by'] = isset($data['performed_by']) ? $data['performed_by'] : null;
        $this->container['in_progress'] = isset($data['in_progress']) ? $data['in_progress'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['pre_check_messages'] = isset($data['pre_check_messages']) ? $data['pre_check_messages'] : null;
        $this->container['result_message'] = isset($data['result_message']) ? $data['result_message'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the operation.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id Job ID for the patching precheck operation.
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets patch_id
     * @return string
     */
    public function getPatchId()
    {
        return $this->container['patch_id'];
    }

    /**
     * Sets patch_id
     * @param string $patch_id Patch ID.
     * @return $this
     */
    public function setPatchId($patch_id)
    {
        $this->container['patch_id'] = $patch_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date Date and time that the patching precheck operation started.
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param string $end_date Date and time that the patching precheck operation stopped.
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets performed_by
     * @return string
     */
    public function getPerformedBy()
    {
        return $this->container['performed_by'];
    }

    /**
     * Sets performed_by
     * @param string $performed_by Name of the user account used to perform the patch precheck.
     * @return $this
     */
    public function setPerformedBy($performed_by)
    {
        $this->container['performed_by'] = $performed_by;

        return $this;
    }

    /**
     * Gets in_progress
     * @return bool
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     * @param bool $in_progress Flag that specifies whether the patch precheck is still in progress.
     * @return $this
     */
    public function setInProgress($in_progress)
    {
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the patching precheck operation. Valid values include: <ul><li><code>PASSED_PRECHECK</code> - Patching precheck passed.</li><li><code>DIDNT_PASS_PRECHECK</code> - Patching precheck did not pass. Check the <code>preCheckMessages</code> attribute for more information.</li><li><code>DIDNT_FINISHED_PRECHECK</code> - An internal error was encountered and the patching precheck could not be performed.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets href
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     * @param string $href URL for checking the status of the patching precheck job. This attribute displays only when viewing all patching precheck operations.
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets pre_check_messages
     * @return string[]
     */
    public function getPreCheckMessages()
    {
        return $this->container['pre_check_messages'];
    }

    /**
     * Sets pre_check_messages
     * @param string[] $pre_check_messages List of patching precheck messages. No patching precheck messages are returned when the precheck completes successfully.
     * @return $this
     */
    public function setPreCheckMessages($pre_check_messages)
    {
        $this->container['pre_check_messages'] = $pre_check_messages;

        return $this;
    }

    /**
     * Gets result_message
     * @return string
     */
    public function getResultMessage()
    {
        return $this->container['result_message'];
    }

    /**
     * Sets result_message
     * @param string $result_message System messages. This attribute displays only when viewing the status of one patching precheck operation.
     * @return $this
     */
    public function setResultMessage($result_message)
    {
        $this->container['result_message'] = $result_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


